import numpy as np
import matplotlib.pyplot as plt
import flopy.utils.binaryfile as bf
from scipy import array, linalg, dot
import math
import flopy


nr = 100
ncol = 50
nrow = 50

Lx = 1000.
Ly = 1000.
ztop = 10.
zbot = -50.
nlay = 1
#nrow = 50
#ncol = 50
delr = Lx / ncol
delc = Ly / nrow
delv = (ztop - zbot) / nlay
botm = np.linspace(ztop, zbot, nlay + 1)

hk = 1.
vka = 1.
sy = 0.1
ss = 1.e-4
laytyp = 1
maxIter = 4


alpha = np.zeros(maxIter)
for pp in range(maxIter):
    alpha[pp] = (2**(maxIter-pp))

Z = np.loadtxt('Z.txt')
Z=Z.reshape(Z.shape[0],1)

karray = np.ndarray(shape=(nrow, ncol), dtype=float, order='F')
array_k = np.ndarray(shape=(nrow, ncol), dtype=float, order='F')
with open('ref_k.txt') as myfile:
    h = [next(myfile) for x in range(3)]
    for iy in range(0, 50):
        for ix in range(0, 50):
            h1 = [next(myfile) for x in range(1)]
            karray[nrow - 1 - iy][ix] = h1[0].split()[0]
            array_k[nrow - 1 - iy][ix] = karray[nrow - 1 - iy][ix]

nper = 2
perlen = [1, 100]
nstp = [1, 100]
steady = [True, False]

modelname = 'tutorial2'
mf = flopy.modflow.Modflow(modelname, exe_name='mf2005')
dis = flopy.modflow.ModflowDis(mf, nlay, nrow, ncol, delr=delr, delc=delc,
                               top=ztop, botm=botm[1:],
                               nper=nper, perlen=perlen, nstp=nstp,
                               steady=steady)


def GSLIB2ndarray(data_file, kcol, nz, nx, ny):
    Karray = np.ndarray(shape=(nz, ny, nx), dtype=float, order='F')

    if ny > 1:
        array_k = np.ndarray(shape=(nz, ny, nx), dtype=float, order='F')
    else:
        array_k = np.zeros(nx)

    with open(data_file) as myfile:  # read first two lines
        head = [next(myfile) for x in range(2)]
        line2 = head[1].split()
        ncol = int(line2[0])  # get the number of columns
        for icol in range(0, ncol):  # read over the column names
            head = [next(myfile) for x in range(1)]
            if icol == kcol:
                col_name = head[0].split()[0]
        for iz in range(0, nz):
            for iy in range(0, ny):
                for ix in range(0, nx):
                    head = [next(myfile) for x in range(1)]
                    Karray[iz][ny - 1 - iy][ix] = head[0].split()[kcol]
                    array_k[iz][ny - 1 - iy][ix] = Karray[iz][ny - 1 - iy][ix]
                # array_k[iz][ny-1-iy][ix] = math.exp(Karray[iz][ny-1-iy][ix])
    return array_k, col_name

k_array,m=GSLIB2ndarray('sgsim.out',0,nr,ncol,nrow)

#k_array = np.abs(k_array)
#k_array = np.log(k_array)
karry = k_array.reshape(100,2500)
karry = karry.mean(axis=0)
karry = karry.reshape(50,50)
plt.matshow(karry)
h_obs = 2
h_space = 10
h_start = 15
h_end = 40
layer = 0
h_k = 1
hed = []
he = []
for i in range(24,25,24):
    hed.append(i)
    for j in (24,26):
        he.append(j)
        locals()['Head_' + str(h_k) + '_x'] = j
        locals()['Head_' + str(h_k) + '_y'] = i
        h_k +=1
        plt.scatter(j,i, marker='o',c='none', edgecolors='white',s=25)

#he = np.array(he)
#he = he.reshape(5,5)
pumping_rate = -500.
wel_sp1 = [[0, nrow/2 - 1, ncol/2 - 1, 0.]]
wel_sp2 = [[0, nrow/2 - 1, ncol/2 - 1, -500.]]
#wel_sp3 = [[0, nrow/2 - 1, ncol/2 - 1, pumping_rate]]
stress_period_data = {0: wel_sp1, 1: wel_sp2}
wel = flopy.modflow.ModflowWel(mf, stress_period_data=stress_period_data)

# Output control+
stress_period_data = {}
for kper in range(nper):
    for kstp in range(nstp[kper]):
        stress_period_data[(kper, kstp)] = ['save head',
                                            'save drawdown',
                                            'save budget',
                                            'print head',
                                            'print budget']
oc = flopy.modflow.ModflowOc(mf, stress_period_data=stress_period_data,
                             compact=True)

# pumping well point
wpt = (24.0,24.0)
mfc = 'None'
if perlen[1] == 100:
    mfc = 'black'
plt.plot(
    wpt[0],
    wpt[1],
    lw=0,
    marker='o',
    markersize=8,
    markeredgecolor='black',
    markerfacecolor=mfc,
    zorder=9,
)
plt.savefig('well_points1.png')
plt.close()

ibound = np.ones((nlay, nrow, ncol), dtype=np.int32)
strt = 10. * np.ones((nlay, nrow, ncol), dtype=np.float32)

ibound = np.ones((nlay, nrow, ncol), dtype=np.int32)
ibound[:, :, 0] = -1
ibound[:, :, -1] = -1
strt = np.ones((nlay, nrow, ncol), dtype=np.float32)
strt[:, :, 0] = 10.
strt[:, :, -1] = 0.
bas = flopy.modflow.ModflowBas(mf, ibound=ibound, strt=strt)

pcg = flopy.modflow.ModflowPcg(mf)

Time = np.linspace(1,101,101)
tss = np.ones((101,nr+1), dtype=np.float32)
idx = (0, int(nrow/2) - 1, int(ncol/2) - 1)

hs = np.zeros((2*len(Time),2), dtype=np.float32)
hss = np.zeros((2*len(Time),101), dtype=np.float32)

Ms = np.zeros((2*len(Time),2), dtype=np.float32)
Mss = np.zeros((2*len(Time),101), dtype=np.float32)


Head_map = int(4**0.5)

for i in range(1,3):
    locals()['h_idx_'+str(i)] = (layer,eval('Head_'+str(i)+'_x'),eval('Head_'+str(i)+'_y'))

lpf = flopy.modflow.ModflowLpf(mf, hk=np.exp(array_k[:, :]), vka=vka, sy=sy, ss=ss, laytyp=laytyp, ipakcb=53)
success, mfoutput = mf.run_model(silent=False, pause=False)
if not success:
    raise Exception('MODFLOW did not terminate normally.')
headobj1 = bf.HeadFile(modelname + '.hds')

tymez = headobj1.get_times()
for t in range(1, 3):
    locals()['hs_' + str(t)] = headobj1.get_ts(eval('h_idx_' + str(t)))
    Ms[(t - 1) * len(tymez):t * len(tymez), :] = eval('hs_' + str(t))
Mss = Ms[:, 1]
mss = Mss.reshape(202,1)

Head_y = Mss.reshape(2, len(Time))
Head_y = Head_y.T

for pp in range(0, maxIter):

    for i in range(0, nr):
        print(i)
        lpf = flopy.modflow.ModflowLpf(mf, hk=np.exp(k_array[i, :, :]), vka=vka, sy=sy, ss=ss, laytyp=laytyp, ipakcb=53)
        mf.write_input()
        success, mfoutput = mf.run_model(silent=False, pause=False)
        if not success:
            raise Exception('MODFLOW did not terminate normally.')

        headobj = bf.HeadFile(modelname + '.hds')

        ts = headobj.get_ts(idx)
        tss[:, 0] = ts[:, 0]
        tss[:, i + 1] = ts[:, 1]

        tymes = headobj.get_times()
        for t in range(1, 3):
            locals()['hs_' + str(t)] = headobj.get_ts(eval('h_idx_' + str(t)))
            hs[(t - 1) * len(tymes):t * len(tymes), :] = eval('hs_' + str(t))
        hss[:, i] = hs[:, 1]

    yf = k_array.reshape(nr, 2500)
    yf = yf.transpose()

    ym = np.array(yf.mean(axis=1))  # Mean of the y_f
    ym = ym.reshape(ym.shape[0], 1)
    dmf = yf - ym

    df = hss[:, 0:100]
    dm = np.array(df.mean(axis=1))
    dm = dm.reshape(dm.shape[0], 1)
    ddf = df - dm

    Cmd_f = (np.dot(dmf, ddf.T)) / (nr - 1);  # The cros-covariance matrix
    Cdd_f = (np.dot(ddf, ddf.T)) / (nr - 1);  # The auto covariance of predicted data

    CD = np.eye(202) * 0.01
    R = linalg.cholesky(CD, lower=True)  # Matriz triangular inferior
    U = R.T  # Matriz R transposta
    p, w = np.linalg.eig(CD)

    aux = np.repeat(mss, nr, axis=1)

    mean = np.zeros(202)
    mean = mean.reshape(1,202)
    noise = np.random.multivariate_normal(mean[0], np.eye(202), nr).T

    d_obs = aux + math.sqrt(alpha[pp]) * np.dot(U, noise)

    # Analysis step
    varn = 1 - 1 / math.pow(10, 2)

    u, s, vh = linalg.svd(Cdd_f + alpha[pp] * CD);
    v = vh.T
    diagonal = s
    for i in range(len(diagonal)):
        if (sum(diagonal[0:i + 1])) / (sum(diagonal)) > varn:
            diagonal = diagonal[0:i + 1]
            break

    u = u[:, 0:i + 1]
    v = v[:, 0:i + 1]
    ess = np.diag(diagonal ** (-1))
    K = np.dot(Cmd_f, (np.dot(np.dot(v, ess), (u.T))))

    ya = yf + (np.dot(K, (d_obs - df)))
    ya = ya.transpose()
    k_array = ya.reshape(nr, ncol, nrow)

    Head_x = hss.reshape(2, len(Time), nr+1)
    Head = np.ones((len(Time), 2, nr+1), dtype=np.float32)
    for i in range(0, nr):
        Head[:, :, i] = Head_x[:, :, i].T
    plt.figure(figsize=(6, 6))
    plt.suptitle('Figure_' + str(pp))
    plt.subplots_adjust(wspace=0.5, hspace=1)
    for j in range(0, 2):
        np.savetxt('Iter ' + str(pp) + '_Head_' + str(j + 1) + '.txt', Head[:, j, :])
        plt.subplot(Head_map, Head_map, j + 1)
        plt.title('well_' + str(j + 1))
        plt.xlabel('time')
        plt.ylabel('head')
        for k in range(0, nr):
            plt.plot(Time, Head[:, j, k], 'b')

        plt.plot(Time, Head_y[:, j], 'r-')
    plt.savefig('Head12_' + str(pp) + '.png')


    # Ensemble mean
    kary = k_array.reshape(100,2500)
    #kary = np.abs(kary)
    #kary = np.log(kary)
    kary = kary.mean(axis=0)

    kary = kary.reshape(50,50)
    plt.matshow(kary)
    plt.colorbar()
    plt.savefig('mean2_' + str(pp) +'.png')


    # variance
    #var = np.abs(k_array)
    #var = np.log(var)
    var = k_array.reshape(100,2500)
    var = np.var(var, axis=0)
    var = var.reshape(50,50)
    plt.matshow(var)
    plt.colorbar()
    plt.savefig('var_'+str(pp)+'.png')

